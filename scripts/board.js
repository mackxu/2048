// Generated by CoffeeScript 1.7.1
var Board;

Board = (function() {
  function Board(opts) {
    var i, j, _i, _j;
    this.numberCells = [];
    this.score = 0;
    for (i = _i = 0; _i < 4; i = ++_i) {
      this.numberCells[i] = [];
      for (j = _j = 0; _j < 4; j = ++_j) {
        this.numberCells[i][j] = new Number(0, i, j);
      }
    }
  }

  Board.prototype.generateOneNumber = function() {
    var randNumberCell, randX, randY, times;
    if (this.noSpace()) {
      return false;
    }
    times = 0;
    randX = +Math.floor(Math.random() * 4);
    randY = +Math.floor(Math.random() * 4);
    randNumberCell = this.numberCells[randX][randY];
    while (true) {
      times += 1;
      if (randNumberCell.value === 0) {
        break;
      }
      randX = +Math.floor(Math.random() * 4);
      randY = +Math.floor(Math.random() * 4);
    }
    randNumberCell.value = Math.random() < 0.5 ? 2 : 4;
    return randNumberCell;
  };

  Board.prototype.updateNumbercells = function(showOneNumber) {
    var cell, rowCells, _i, _j, _len, _len1, _ref;
    _ref = this.numberCells;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      rowCells = _ref[_i];
      for (_j = 0, _len1 = rowCells.length; _j < _len1; _j++) {
        cell = rowCells[_j];
        cell.merged = false;
        showOneNumber(cell);
      }
    }
  };

  Board.prototype.noSpace = function() {
    var i, j, _i, _j;
    for (i = _i = 0; _i < 4; i = ++_i) {
      for (j = _j = 0; _j < 4; j = ++_j) {
        if (this.numberCells[i][j] === 0) {
          return true;
        }
      }
    }
    return false;
  };

  Board.prototype.canMoveLeft = function() {
    var i, j, _i, _j;
    for (i = _i = 0; _i < 4; i = ++_i) {
      for (j = _j = 1; _j < 4; j = ++_j) {
        if (this.numberCells[i][j].value !== 0) {
          if (this.numberCells[i][j - 1].value === 0 || this.numberCells[i][j - 1].value === this.numberCells[i][j].value) {
            return true;
          }
        }
      }
    }
    return false;
  };

  Board.prototype.canMoveRight = function() {
    var j, rowCells, _i, _j, _len, _ref;
    _ref = this.numberCells;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      rowCells = _ref[_i];
      for (j = _j = 3; _j > 0; j = --_j) {
        if (rowCells[j - 1].value !== 0) {
          if (rowCells[j].value === 0 || rowCells[j] === rowCells[j - 1]) {
            return true;
          }
        }
      }
    }
    return false;
  };

  Board.prototype.canMoveUp = function() {
    var curCell, i, j, prevCell, _i, _j;
    for (j = _i = 0; _i < 4; j = ++_i) {
      for (i = _j = 1; _j < 4; i = ++_j) {
        prevCell = this.numberCells[i - 1][j];
        curCell = this.numberCells[i][j];
        if (prevCell === 0 || prevCell.value === curCell.value) {
          return true;
        }
      }
    }
    return false;
  };

  Board.prototype.canMoveDown = function() {
    var curCell, i, j, prevCell, _i, _j;
    for (j = _i = 0; _i < 4; j = ++_i) {
      for (i = _j = 3; _j > 0; i = --_j) {
        prevCell = this.numberCells[i][j];
        curCell = this.numberCells[i - 1][j];
        if (prevCell === 0 || prevCell.value === curCell.value) {
          return true;
        }
      }
    }
    return false;
  };

  Board.prototype.noBlock = function(start, end) {
    var x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
    if (start.x === end.x) {
      for (y = _i = _ref = start.y, _ref1 = end.y; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; y = _ref <= _ref1 ? ++_i : --_i) {
        return this.numberCells[start.x][y] !== 0;
      }
    } else {
      for (x = _j = _ref2 = start.x, _ref3 = end.x; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; x = _ref2 <= _ref3 ? ++_j : --_j) {
        return this.numberCells[x][start.y] !== 0;
      }
    }
    return true;
  };

  Board.prototype.noMove = function() {};

  Board.prototype.moveCell = function(startCell, targetCell, moveCellAnimate) {
    var isSameCell;
    isSameCell = targetCell.value === startCell.value;
    if (targetCell.value === 0 || isSameCell) {
      if (this.noBlock(startCell, targetCell)) {
        return false;
      }
      if (isSameCell) {
        if (targetCell.merged) {
          return false;
        }
        this.score += startCell.value;
        targetCell.merged = true;
      }
      targetCell.value += startCell.value;
      startCell.value = 0;
      moveCellAnimate(startCell, targetCell);
      return true;
    }
  };

  Board.prototype.moveLeft = function(moveCellAnimate) {
    var i, j, k, startCell, targetCell, _i, _j, _k;
    if (!this.canMoveLeft()) {
      return false;
    }
    for (i = _i = 0; _i < 4; i = ++_i) {
      for (j = _j = 1; _j < 4; j = ++_j) {
        startCell = this.numberCells[i][j];
        if (startCell.value !== 0) {
          for (k = _k = 0; 0 <= j ? _k < j : _k > j; k = 0 <= j ? ++_k : --_k) {
            targetCell = this.numberCells[i][k];
            if (this.moveCell(startCell, targetCell, moveCellAnimate)) {
              break;
            } else {
              continue;
            }
          }
        }
      }
    }
    return true;
  };

  Board.prototype.moveRight = function(moveCellAnimate) {
    var i, j, k, startCell, targetCell, _i, _j, _k;
    if (!this.canMoveRight()) {
      return false;
    }
    for (i = _i = 0; _i < 4; i = ++_i) {
      for (j = _j = 3; _j > 0; j = --_j) {
        startCell = this.numberCells[i][j - 1];
        if (startCell.value !== 0) {
          for (k = _k = 3; 3 <= j ? _k < j : _k > j; k = 3 <= j ? ++_k : --_k) {
            targetCell = this.numberCells[i][k];
            if (this.moveCell(startCell, targetCell, moveCellAnimate)) {
              break;
            } else {
              continue;
            }
          }
        }
      }
    }
    return true;
  };

  Board.prototype.moveUp = function(moveCellAnimate) {
    var i, j, k, startCell, targetCell, _i, _j, _k;
    if (!this.canMoveLeft()) {
      return false;
    }
    for (j = _i = 0; _i < 4; j = ++_i) {
      for (i = _j = 1; _j < 4; i = ++_j) {
        startCell = this.numberCells[i][j];
        if (startCell.value !== 0) {
          for (k = _k = 0; 0 <= i ? _k < i : _k > i; k = 0 <= i ? ++_k : --_k) {
            targetCell = this.numberCells[k][j];
            if (this.moveCell(startCell, targetCell, moveCellAnimate)) {
              break;
            } else {
              continue;
            }
          }
        }
      }
    }
    return true;
  };

  Board.prototype.moveDown = function() {
    var i, j, k, moveCells, startCell, targetCell, _i, _j, _k;
    moveCells = [];
    if (!this.canMoveDown()) {
      return false;
    }
    for (j = _i = 0; _i < 4; j = ++_i) {
      for (i = _j = 3; _j > 0; i = --_j) {
        startCell = this.numberCells[i - 1][j];
        if (startCell.value !== 0) {
          for (k = _k = 3; 3 <= i ? _k < i : _k > i; k = 3 <= i ? ++_k : --_k) {
            targetCell = this.numberCells[k][j];
            if (this.moveCell(startCell, targetCell, moveCellAnimate)) {
              break;
            } else {
              continue;
            }
          }
        }
      }
    }
    return true;
  };

  return Board;

})();
